ProgramaciÃ³n Orientada a Objetos
â”‚
â”œâ”€â”€ Polimorfismo
â”‚   â”œâ”€â”€ Requisitos:
â”‚   â”‚   â”œâ”€â”€ Herencia
â”‚   â”‚   â””â”€â”€ MÃ©todos sobrescritos (mismo nombre en padre e hijo)
â”‚   â”œâ”€â”€ Â¿QuÃ© permite?
â”‚   â”‚   â””â”€â”€ Tratar objeto hijo como padre, ejecutando comportamiento del hijo
â”‚   â”œâ”€â”€ Ejemplo:
â”‚   â”‚   â”œâ”€â”€ Clase Padre: Animal
â”‚   â”‚   â”œâ”€â”€ Hijos: LeÃ³n, Oveja
â”‚   â”‚   â””â”€â”€ MÃ©todo sobrescrito: emitirSonido()
â”‚   â””â”€â”€ Beneficio:
â”‚       â””â”€â”€ Evitar cÃ³digo repetido (listas separadas innecesarias)
â”‚
â””â”€â”€ Clases Abstractas
    â”œâ”€â”€ Â¿QuÃ© son?
    â”‚   â””â”€â”€ Clase padre que obliga a los hijos a implementar ciertos mÃ©todos
    â”œâ”€â”€ CaracterÃ­sticas:
    â”‚   â”œâ”€â”€ Tienen al menos un mÃ©todo virtual puro (se declara con `= 0`)
    â”‚   â”œâ”€â”€ No se puede crear objetos de ellas (pero sÃ­ punteros)
    â”‚   â””â”€â”€ Permiten polimorfismo usando punteros
    â”œâ”€â”€ Ejemplo:
    â”‚   â”œâ”€â”€ Clase abstracta: ElementoGrÃ¡fico
    â”‚   â”‚   â”œâ”€â”€ MÃ©todos obligatorios: dibujar(), borrar(), llenar()
    â”‚   â”‚
    â”‚   â””â”€â”€ Hijos concretos:
    â”‚       â”œâ”€â”€ Punto (usa coordenada)
    â”‚       â”œâ”€â”€ LÃ­nea (usa orientaciÃ³n y tamaÃ±o)
    â”‚       â””â”€â”€ GarabatoPuntos (conjunto de puntos, usa composiciÃ³n)
    â””â”€â”€ Uso:
        â””â”€â”€ Crear listas polimÃ³rficas (vector<ElementoGrÃ¡fico*>)
            â”œâ”€â”€ new Punto
            â”œâ”€â”€ new LÃ­nea
            â””â”€â”€ new GarabatoPuntos


---

### Â¿QuÃ© significa **mÃ©todo sobrescrito**?

- **Sobrescribir un mÃ©todo** significa que una **clase hija** crea **su propia versiÃ³n** de un mÃ©todo que ya estaba en la **clase padre**.
- **Se llama igual**, pero **hace algo diferente** o **mejorado**.

ðŸ”µ **En resumen:**  
Es **redefinir** un mÃ©todo heredado, para que se comporte de manera especial en la clase hija.

---

### Ejemplo sencillo en C++

```cpp
// Clase Padre
class Animal {
public:
    virtual void emitirSonido() {
        cout << "Animal hace un sonido genÃ©rico" << endl;
    }
};

// Clase Hija
class Perro : public Animal {
public:
    void emitirSonido() override {  // Sobrescribe el mÃ©todo
        cout << "El perro ladra: Â¡Guau!" << endl;
    }
};
```

ðŸ”µ AquÃ­:  
- `Animal` tiene `emitirSonido()`.
- `Perro` **sobrescribe** `emitirSonido()` para hacer algo diferente.

---

### Â¿Por quÃ© sobrescribir es importante?
Porque gracias a eso funciona el **polimorfismo**:  
Aunque tengas un `Animal*`, si el objeto real es un `Perro`, **se ejecutarÃ¡ el `emitirSonido()` del Perro**.

---


